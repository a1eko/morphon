#!/usr/bin/env python

from __future__ import print_function, division
from morphon import Morpho
import numpy as np
import argparse
import os

def parse():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("file", type=str, help="input file (swc)", nargs='+')
    parser.add_argument("-O", "--dir", type=str, help="output directory")
    parser.add_argument("-r", "--res", type=float, default=5.0, help="sampling resolution, um [5.0]")
    return parser.parse_args()

def regularize(coords, diams, step):
    new_coords = []
    new_diams = []

    path = [0]
    for c0, c1 in zip(coords[:-1], coords[1:]):
        link = np.linalg.norm(c1-c0)
        path.append(path[-1] + link)

    regpoints = [step*k for k in range(1, int(path[-1]/step)+1)]
    for point in regpoints:
        i1 = 0
        while path[i1] < point: i1 += 1
        i0 = i1-1
        c0 = coords[i0]
        c1 = coords[i1]
        d0 = diams[i0]
        d1 = diams[i1]
        ds = point - path[i0]
        link = np.linalg.norm(c1-c0)
        new_coord = c0 + ds/link*(c1-c0)
        new_diam = d0 + ds/link*(d1-d0)
        new_coords.append(new_coord)
        new_diams.append(new_diam)

    return np.array(new_coords), np.array(new_diams)


def main():
    args = parse()
    res = args.res
    for morphology in args.file:
        print(morphology)
        inp = os.path.dirname(os.path.abspath(morphology))
        out = args.dir if args.dir else inp
        name = os.path.basename(morphology).split('.')[0]
        m = Morpho(morphology)

        for sec in m.sections():
            neurite = m.neurite(sec[0])
	    parent = m.parent(sec[0])
	    idents = [parent] + sec

            if neurite is not 'soma':
                sec_coords = np.array(m.coords(idents=idents)).transpose()
                sec_diams = np.array([m.diam(ident) for ident in idents])
		sec_diams[0] = sec_diams[1]
                new_coords, new_diams = regularize(sec_coords, sec_diams, res)

                if len(sec) > 2:
                    for ident in sec[:-1]:
                        m.remove(ident)

                ident = sec[-1]
                for coord, diam in zip(new_coords[-1::-1], new_diams[-1::-1]):
                    ident = m.insert(ident, neurite, coord, diam)

        m.renumber(continuous=True)
        m.save(out + '/' + name + '-reg%.0f.swc' % res)


if __name__ == "__main__":
    main()
