#!/usr/bin/env python

"Neuron morphology viewer"

from morphon import Morpho, measure, plot
import argparse
import json

import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt


def parse():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("file", type=str, help="input file (swc)")
    return parser.parse_args()


def main():
    args = parse()
    morphology = args.file
    m = Morpho(morphology)

    neurites = set(m.neurite(i) for i in m.traverse())
    colors = {'soma': 'black', 'dend': 'blue', 'apic': 'green', 'axon': 'red'}
    thickness = {'soma': 5, 'dend': 1, 'apic': 1, 'axon': 0.5}

    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ax.set_title(morphology)
    ax.set_xlabel('x')
    ax.set_ylabel('z')
    ax.set_zlabel('y')
    for neurite in neurites:
        plot(m, ax, projection='3d', 
	    neurites=[neurite],
	    color=colors[neurite],
	    linewidth=thickness[neurite],
	    equal_scales=True)
    plt.show()

    metrics = {}
    metrics['total'] = measure(m)
    for neurite in neurites:
        idents = m.points(neurites=[neurite])
	metrics[neurite] = measure(m, idents=idents)
    for neurite in neurites:
        metrics[neurite]['number_of_branches'] = 0
        metrics[neurite]['number_of_stems'] = 0
    stems = m.stems()
    for stem in stems:
        neurite = m.neurite(stem)
	feature_value = measure(m, ident=stem, features=['number_of_branches'])
        metrics[neurite]['number_of_branches'] += feature_value['number_of_branches']
        metrics[neurite]['number_of_stems'] += 1
    
    print json.dumps(metrics, indent=4, sort_keys=True)


if __name__ == "__main__":
    main()
