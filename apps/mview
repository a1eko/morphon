#!/usr/bin/env python

"Neuron morphology viewer"

from morphon import Morpho, plot
import argparse

import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt


def parse():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("file", type=str, help="input file (swc)", nargs='+')
    parser.add_argument("-a", "--axis_off", help="turn axis off", action='store_true')
    parser.add_argument("-s", "--scale_bar", type=float, default=0.0, help="show scale bar (in microns)")
    parser.add_argument("-t", "--title", type=str, help="set figure title")
    parser.add_argument("-o", "--output", type=str, help="save image to file")
    parser.add_argument("-c", "--colors", type=str, help="line colors, comma separated")
    parser.add_argument("-n", "--neurites", type=str, help="neurite type names, comma separated")
    return parser.parse_args()


def main():
    args = parse()
    fig = plt.figure()
    ax = fig.gca(projection='3d')
    if args.title:
        ax.set_title(args.title)
    if len(args.file) == 1:
	equal_scales=True
    else:
	equal_scales=False
    ax.set_xlabel('x')
    ax.set_ylabel('z')
    ax.set_zlabel('y')
    if args.axis_off:
        ax.set_axis_off()
    if args.colors:
       cell_colors = args.colors.split(',') 
    colors = {'soma': 'black', 'dend': 'blue', 'apic': 'green', 'axon': 'grey'}
    thickness = {'soma': 1, 'dend': 1, 'apic': 1, 'axon': 0.5}
    linestyles = {'soma': ' ', 'dend': '-', 'apic': '-', 'axon': '-'}
    markers = {'soma': 'o', 'dend': '', 'apic': '', 'axon': ''}
    for morphology in args.file:
        m = Morpho(morphology)
        if abs(args.scale_bar) > 0.0:
            (x1, y1, z1), (x2, y2, z2) = m.bounds()
	    ax.plot([x2, x2], [z2, z2], [y2, y2-args.scale_bar], color='k', linewidth=3)
        neurites = args.neurites.split(',') if args.neurites else set(m.neurite(i) for i in m.traverse())
	if args.colors:
	    if cell_colors:
	        c = cell_colors[0]
		cell_colors.remove(c)
	    for neurite in neurites:
	        colors[neurite] = c
        for neurite in sorted(neurites):
            plot(m, ax, projection='3d', equal_scales=equal_scales,
                neurites=[neurite],
                color=colors[neurite],
                linewidth=thickness[neurite],
                marker=markers[neurite])
    plt.tight_layout()
    plt.show() if not args.output else plt.savefig(args.output)


if __name__ == "__main__":
    main()
